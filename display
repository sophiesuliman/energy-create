<!doctype html>
<html lang="en">
<head>
<meta charset="utf-8" />
<meta name="viewport" content="width=device-width,initial-scale=1" />
<title>Orb Display</title>
<style>
  :root { --bg:#0b0f17; --fg:#e8eefc; --muted:#93a0b4; }
  html,body{height:100%;margin:0;background:linear-gradient(180deg,#0b0f17 0%,#121a29 100%);color:var(--fg);font-family:system-ui,-apple-system,Segoe UI,Roboto,Inter,Arial,sans-serif}
  .wrap{min-height:100%;display:flex;flex-direction:column;align-items:center;justify-content:center;gap:18px;padding:24px;text-align:center}
  h1{margin:0 0 6px 0;font-weight:600}
  .orb-wrap{perspective:1000px;display:flex;align-items:center;justify-content:center;width:min(90vw,520px);height:min(60vh,520px)}
  .orb{
    width:min(80vw,420px);height:min(80vw,420px);max-width:420px;max-height:420px;border-radius:50%;
    background:
      radial-gradient(40% 40% at 30% 30%, #5cc3ff 0%, transparent 60%),
      radial-gradient(60% 60% at 70% 70%, #008bff 0%, transparent 60%),
      radial-gradient(120% 120% at 50% 120%, rgba(255,255,255,.12) 0%, transparent 55%),
      radial-gradient(100% 100% at 50% 50%, #1c2942 0%, #0f1726 70%, #0a1120 100%);
    box-shadow:
      inset 0 0 50px 10px rgba(255,255,255,.05),
      0 40px 100px rgba(0,0,0,.6),
      0 0 80px rgba(0,139,255,.2);
    transform-style:preserve-3d; will-change: transform;
    transform: rotateX(-10deg) rotateY(20deg) scale(1);
    transition: transform .06s linear;
  }
  .panel{display:flex;flex-direction:column;gap:10px;align-items:center}
  .row{display:flex;gap:8px;flex-wrap:wrap;align-items:center;justify-content:center}
  input{width:260px;padding:8px 10px;border-radius:8px;border:1px solid #2a3852;background:#0e1625;color:var(--fg)}
  button{padding:9px 12px;border-radius:10px;border:1px solid #2a3852;background:#111a2a;color:var(--fg);cursor:pointer}
  .qr{background:#fff;border-radius:10px;padding:8px}
  .muted{font-size:13px;color:var(--muted);max-width:520px}
  .ok{color:#86efac}.bad{color:#fca5a5}
</style>
</head>
<body>
<div class="wrap">
  <h1>Orb Display</h1>
  <div class="orb-wrap"><div id="orb" class="orb" aria-label="Glowing orb"></div></div>

  <div class="panel">
    <div class="row">
      <input id="peerId" readonly />
      <button id="regen">New session</button>
    </div>
    <img id="qr" class="qr" alt="QR to open controller on phone" />
    <p id="status" class="muted">Waiting for controller…</p>
    <p class="muted">Scan the QR with your phone. It opens <code>controller.html</code>. Tap <b>Start motion</b>.</p>
  </div>
</div>

<!-- PeerJS (free cloud) -->
<script src="https://unpkg.com/peerjs@1.5.2/dist/peerjs.min.js"></script>
<script>
(function(){
  const orb = document.getElementById('orb');
  const peerIdInput = document.getElementById('peerId');
  const qrImg = document.getElementById('qr');
  const statusEl = document.getElementById('status');
  const regenBtn = document.getElementById('regen');

  let peer, conn;

  function setStatus(msg, ok=false){ statusEl.textContent = msg; statusEl.className = 'muted ' + (ok?'ok':''); }

  function sessionURL(id){
    // URL for controller.html in the SAME folder
    const base = location.origin + location.pathname.replace(/[^\/]+$/, '');
    return `${base}controller.html?id=${encodeURIComponent(id)}`;
  }
  function makeQR(url){
    // simple static QR image
    return `https://api.qrserver.com/v1/create-qr-code/?size=420x420&data=${encodeURIComponent(url)}`;
  }
  function newPeer(){
    if(peer){ try{peer.destroy();}catch(e){} }
    peer = new Peer(undefined, {debug:0}); // random id on PeerJS cloud
    peer.on('open', id => {
      peerIdInput.value = id;
      const url = sessionURL(id);
      qrImg.src = makeQR(url);
      setStatus('Show this QR to your phone → open controller', false);
    });
    peer.on('connection', c => {
      conn = c;
      setStatus('Phone connected ✅', true);
      conn.on('data', onData);
      conn.on('close', () => setStatus('Phone disconnected', false));
    });
    peer.on('error', err => setStatus('Peer error: ' + err.type, false));
  }

  function onData(msg){
    if(!msg || msg.t!=='ori') return;
    // Map phone orientation to orb rotation
    const {alpha, beta, gamma} = msg;
    // Clamp + smooth a bit
    const x = Math.max(-90, Math.min(90, beta || 0));   // front-back tilt
    const y = Math.max(-90, Math.min(90, gamma || 0));  // left-right tilt
    orb.style.transform = `rotateX(${-(x*0.9)}deg) rotateY(${y*1.2}deg) scale(1)`;
  }

  regenBtn.addEventListener('click', newPeer);
  newPeer();
})();
</script>
</body>
</html>
